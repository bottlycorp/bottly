generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username     String
  createdAt    Int
  userId       String        @id @unique
  isPremium    Boolean       @default(false)
  locale       Locale        @default(en_US)
  discussions  Discussion[]
  messages     Message[]
  privacy      Privacy?
  questions    Question[]
  subscription Subscription?
  tips         Tips?
  usages       Usage?
  learn        Learn?
}

model Learn {
  id         String      @id @default(cuid())
  count      Int         @default(0)
  lastLearn  Int         @default(0)
  firstLearn Int         @default(0)
  nextLearn  Int         @default(0)
  interests  Interests[]
  subjects   Subject[]
  userId     String      @unique
  user       User        @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Subject {
  id        String   @id @default(cuid())
  createdAt Int      @default(0)
  subject   String   @default("Lorem imspu mipsu")
  liked     LikeType @default(NONE)
  learnId   String
  learn     Learn    @relation(fields: [learnId], references: [id], onDelete: Cascade)
}

model Question {
  id          String  @id @unique @default(cuid())
  question    String  @default("")
  answer      String  @default("")
  createdAt   Int     @default(0)
  repliedAt   Int     @default(0)
  userId      String
  channelName String  @default("Not defined")
  guildName   String  @default("Not defined")
  isFavorite  Boolean @default(false)
  qrCodeUrl   String  @default("")
  favoriteAt  Int     @default(0)
  webUrls     String[] @default([])
  history     String[] @default([])
  user        User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Usage {
  id     String   @id @default(cuid())
  usage  Int      @default(20)
  max    UsageMax @default(FREE)
  userId String   @unique
  user   User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Privacy {
  collectChat Boolean @default(false)
  autoDelete  Boolean @default(false)
  accepted    Boolean @default(false)
  failed      Boolean @default(false)
  userId      String  @id @unique
  user        User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Discussion {
  id             String     @id @default(cuid())
  createdAt      Int        @default(0)
  firstMessageAt Int        @default(0)
  lastMessageAt  Int        @default(0)
  link           String     @default("")
  count          Int        @default(0)
  writing        Boolean    @default(false)
  active         Boolean    @default(true)
  title          String     @default("Lorem imspu mipsu")
  channelId      String     @unique @default("1078410876014563489")
  contextId      String     @default("default")
  type           ThreadType @default(public)
  userId         String
  guildId        String     @default("1076863331517874240")
  user           User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  messages       Message[]
}

model Message {
  id           String     @id @default(cuid())
  createdAt    Int        @default(0)
  message      String     @default("Lorem imspu mipsu")
  role         Role       @default(user)
  tokens       Int        @default(0)
  counted      Boolean    @default(false)
  discussionId String
  userId       String
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Tips {
  id                String  @id @default(cuid())
  chatPremiumSaveIt Boolean @default(true)
  webContextsWarning Boolean @default(true)
  userId            String  @unique
  user              User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Subscription {
  id             String @id @default(cuid())
  subscriptionId String @unique
  paymentMethod  String
  firstPayment   Int    @default(0)
  lastPayment    Int    @default(0)
  nextPayment    Int    @default(0)
  email          String @unique
  userId         String @unique
  canceledAt     Int    @default(0)
  user           User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

enum LikeType {
  LIKED
  DISLIKED
  NONE
}

enum Interests {
  MUSIC
  READING
  CRYPTO
  SPORT
  ESPORT
  MATHEMATICS
  PROGRAMMING
  WORK
  TRAVEL
  MOVIES
  PHOTOGRAPHY
  COOKING
  GAMING
  ART
  DANCE
  FASHION
  HEALTH
  TECHNOLOGY
  SCIENCE
  ANIMALS
  CARS
  EVENTS
  SHOPPING
  SPACE
  PARANORMAL
}

enum Locale {
  id
  en_US
  en_GB
  bg
  zh_CN
  zh_TW
  hr
  cs
  da
  nl
  fi
  fr
  de
  el
  hi
  hu
  it
  ja
  ko
  lt
  no
  pl
  pt_BR
  ro
  ru
  es_ES
  sv_SE
  th
  tr
  uk
  vi
}

enum UsageMax {
  FREE
  PREMIUM
}

enum ThreadType {
  public
  private
}

enum Role {
  user
  bot
  system
}
